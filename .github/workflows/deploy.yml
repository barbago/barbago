name: Deploy to Environment
run-name: Deploy to ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to <dev|stage|prod>'
        required: true
        type: string
        default: 'dev'
      deployApps:
        description: 'Apps to deploy <all|api|mobile|web>'
        required: false
        type: string
        default: 'all'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod
        default: 'dev'
      deployApps:
        description: 'Apps to deploy'
        required: false
        type: choice
        options:
          - all
          - api
          - mobile
          - web
        default: 'all'

jobs:
  setup:
    name: Setup Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Cache Code
        uses: actions/cache@v3
        with:
          key: '${{ github.run_id }}'
          path: './'

  deploy_web:
    name: Deploy Web
    runs-on: ubuntu-latest
    environment: '${{ inputs.environment }}'
    if: inputs.deployApps == 'all' || inputs.deployApps == 'web'
    needs: setup
    steps:
      - name: Retrieve Code from Cache
        uses: actions/cache@v3
        with:
          key: '${{ github.run_id }}'
          path: './'


      - name: Copy Secrets
        run: sh ./.github/scripts/env.sh

      - name: Web Deploy with Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ env.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ env.FIREBASE_ACCOUNT }}'
          projectId: '${{ inputs.environment }}'
          channelId: 'live'
    env:
      ENV_FILE: '${{ secrets.ENV_FILE }}'

  deploy_mobile:
    name: Deploy Expo Go
    runs-on: ubuntu-latest
    environment: '${{ inputs.environment }}'
    if: inputs.deployApps == 'all' || inputs.deployApps == 'mobile'
    needs: setup
    steps:
      - name: Retrieve Code from Cache
        uses: actions/cache@v3
        with:
          key: '${{ github.run_id }}'
          path: './'


      - name: Copy Secrets
        run: sh ./.github/scripts/env.sh

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v7
        with:
          eas-version: latest
          packager: npm
          token: '${{ env.EXPO_TOKEN }}'

      - name: Mobile Deploy with EAS
        working-directory: ui
        run: eas update --non-interactive --auto --branch '${{ inputs.environment }}'
    env:
      ENV_FILE: '${{ secrets.ENV_FILE }}'

  deploy_backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    environment: '${{ inputs.environment }}'
    if: inputs.deployApps == 'all' || inputs.deployApps == 'api'
    needs: setup
    steps:
      - name: Retrieve Code from Cache
        uses: actions/cache@v3
        with:
          key: '${{ github.run_id }}'
          path: './'

      - name: Functions Deploy with Firebase
        run: npx firebase-tools deploy --only functions --token '${{ env.FIREBASE_TOKEN }}' -P '${{ inputs.environment }}'
    env:
      ENV_FILE: '${{ secrets.ENV_FILE }}'

env:
  EXPO_TOKEN: '${{ secrets.EXPO_TOKEN }}'
  FIREBASE_TOKEN: '${{ secrets.FIREBASE_TOKEN }}'
  GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  FIREBASE_ACCOUNT: "${{ inputs.environment == 'prod' && secrets.FIREBASE_SERVICE_ACCOUNT_BARBAGO_PROD || inputs.environment == 'stage' && secrets.FIREBASE_SERVICE_ACCOUNT_BARBAGO_STAGE || inputs.environment == 'dev' && secrets.FIREBASE_SERVICE_ACCOUNT_BARBAGO_DEV || null }}"

concurrency:
  group: ${{ inputs.environment }}-${{ github.workflow }}
  cancel-in-progress: true
